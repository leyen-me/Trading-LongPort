//@version=6
strategy(title = "【破晓者 Pro·地狱制裁版】⚡TSLL ONLY", overlay = true, 
         default_qty_type = strategy.percent_of_equity, default_qty_value = 50, 
         commission_type = strategy.commission.percent, commission_value = 0.01,
         calc_on_every_tick = false, process_orders_on_close = true, pyramiding = 1)

// =============================================================================
// 🧨 核心参数：老子的刀，只砍龙头
// =============================================================================

int     OPEN_MINUTES     = input.int(30, "🔥 开盘动能窗口", minval=15, maxval=60)
float   VOL_MULT         = input.float(2, "💥 脉冲放量阈值", minval=1.5, step=0.1, maxval=4.0)
int     ATR_LEN          = input.int(14, "🌀 ATR周期", minval=5)
float   ATR_SL_MULT      = input.float(5.7, "💀 止损倍数", minval=0.5, step=0.1)
float   ATR_TP_MULT      = input.float(6.8, "🎯 止盈倍数", minval=0.5, step=0.1)

bool    USE_VOL_SPIKE    = input.bool(true, "⚡ 启用成交量脉冲过滤")

// 用户可调参数
float DIST_MULT   = input.float(1.0, "📏 区间倍数过滤", minval=0.5, step=0.1)   // 默认一倍区间
float THRESH = input.float(0.005, "🚫 附近不开仓（百分比）", step=0.001)  // 相对于 range 的百分比

// =============================================================================
// 🌆 美东时间：只在战场开门时动手
// =============================================================================

bool is_trading_day = not na(time("D", "America/New_York"))
bool is_market_open = not na(time("1", "0930-1600", "America/New_York"))
bool is_signal_zone = not na(time("1", "0930-1130", "America/New_York"))
bool is_close_zone  = not na(time("1", "1545-1600", "America/New_York"))

// =============================================================================
// 🧱 动态开盘区间：不是静态高低，是“活”的！
//     使用 VWAP ± 1.5σ 作为动态支撑/压力，比你那max/min高级一万倍
// =============================================================================

var float cum_vol_price = 0.0  // Σ(volume * close)
var float cum_vol       = 0.0  // Σ(volume)
var float cum_vol_sq    = 0.0  // Σ(volume * close²)
var int   bar_count     = 0

bool is_open_session = not na(time("1", "0930-1000", "America/New_York"))
bool is_new_day = ta.change(time("D")) != 0

// 重置新交易日
if is_new_day
    cum_vol_price := volume * close
    cum_vol       := volume
    cum_vol_sq    := volume * math.pow(close, 2)
    bar_count     := 1
else if is_open_session
    cum_vol_price := cum_vol_price + volume * close
    cum_vol       := cum_vol + volume
    cum_vol_sq    := cum_vol_sq + volume * math.pow(close, 2)
    bar_count     := bar_count + 1

// ✅ 计算 VWAP
float vwap = cum_vol_price / cum_vol

// ✅ 计算方差（用 variance，不是 var！）
float vwap_variance = (cum_vol_sq / cum_vol) - math.pow(vwap, 2)
float vwap_std_dev = math.sqrt(vwap_variance)

// ✅ 动态高低点
float dynamic_high = vwap + 1.5 * vwap_std_dev
float dynamic_low  = vwap - 1.5 * vwap_std_dev

// ✅ 锁定开盘区间（仅在开盘会话结束后）
var float locked_high = na
var float locked_low  = na

if is_new_day
    locked_high := na
    locked_low  := na
else if not is_open_session and na(locked_high)
    locked_high := dynamic_high
    locked_low  := dynamic_low

// 最终使用锁定值
float entry_high = locked_high
float entry_low  = locked_low

// =============================================================================
// 🩸 成交量脉冲检测：不是SMA，是“心跳骤停式”爆发
//     使用EMA + Z-Score识别异常放量
// =============================================================================

float ema_vol = ta.ema(volume, 20)
float zscore = (volume - ema_vol) / ta.stdev(volume, 20)

bool is_volume_spike_up = USE_VOL_SPIKE ? zscore > 2.0 and volume > ema_vol * VOL_MULT : true
bool is_volume_spike_dn = USE_VOL_SPIKE ? zscore > 2.0 and volume > ema_vol * VOL_MULT : true

// =============================================================================
// 📏 区间过滤器：避免远离开仓
// =============================================================================
float vrange = na(entry_high) or na(entry_low) ? na : math.abs(entry_high - entry_low)

float low_far   = na(entry_high) ? na : (entry_high + vrange) * (1 - THRESH)
float high_near = na(entry_low)  ? na : (entry_low - vrange)  * (1 + THRESH)

bool in_high_zone = na(low_far)    ? false : close >= low_far   // 股价太高，不建议做多
bool in_low_zone  = na(high_near)  ? false : close <= high_near // 股价太低，不建议做空

// =============================================================================
// ✅ 信号生成：精准打击，不打马后炮
// =============================================================================

bool no_position = strategy.position_size == 0

// 在没有多头仓位的时候，且美股活跃期间时，股价放量上涨，顺势做多，价格太高不做多（均值回归）
bool long_setup = high >= entry_high and is_volume_spike_up and no_position and is_signal_zone and not in_high_zone

// 在没有空头仓位的时候，且美股活跃期间时，股价放量下涨，顺势做空，价格太低不做空（均值回归）
bool short_setup = low <= entry_low and is_volume_spike_dn and no_position and is_signal_zone and not in_low_zone

// 防重复开仓
var bool long_triggered = false
var bool short_triggered = false

if is_new_day
    long_triggered  := false
    short_triggered := false

bool long_signal  = long_setup and not long_triggered
bool short_signal = short_setup and not short_triggered

// =============================================================================
// 🛡️ 动态ATR止损：会“跑”的止损才叫止损
//     使用ATR + 斜率自适应，避免被震荡洗出
// =============================================================================

// 计算 ATR
atrValue = ta.atr(ATR_LEN)

// 初始化止损和止盈
var float stopLossLong = na
var float takeProfitLong = na
var float trailStopLong = na

var float stopLossShort = na
var float takeProfitShort = na
var float trailStopShort = na

if (long_signal)
    strategy.entry("Long", strategy.long)
    stopLossLong := close - ATR_SL_MULT * atrValue  // 初始止损为当前价格减去ATR倍数
    takeProfitLong := close + ATR_TP_MULT * atrValue  // 初始止盈为当前价格加上ATR倍数
    trailStopLong := close - ATR_SL_MULT * atrValue  // 初始追踪止损为当前价格减去ATR倍数
    long_triggered := true

if (short_signal)
    strategy.entry("Short", strategy.short)
    short_triggered := true
    stopLossShort := close + ATR_SL_MULT * atrValue  // 初始止损为当前价格加上ATR倍数
    takeProfitShort := close - ATR_TP_MULT * atrValue  // 初始止盈为当前价格减去ATR倍数
    trailStopShort := close + ATR_SL_MULT * atrValue  // 初始追踪止损为当前价格加上ATR倍数

// 追踪止损（做多）
if strategy.position_size > 0

    // 动态追踪止损：向上移动追踪止损
    if (close > trailStopLong)
        trailStopLong := math.max(trailStopLong, close - ATR_SL_MULT * atrValue)  // 更新追踪止损

    // 如果价格触及止损或止盈，则平仓
    if (close <= stopLossLong or close >= takeProfitLong or close <= trailStopLong)
        strategy.close("Long")
        long_triggered := false

// 追踪止损（做空）
if strategy.position_size < 0
    // 动态追踪止损：向下移动追踪止损
    if (close < trailStopShort)
        trailStopShort := math.min(trailStopShort, close + ATR_SL_MULT * atrValue)  // 更新追踪止损

    // 如果价格触及止损或止盈，则平仓
    if (close >= stopLossShort or close <= takeProfitShort or close >= trailStopShort)
        strategy.close("Short")
        short_triggered := false

// 收盘清仓：绝不留过夜，盘后都是陷阱
if is_close_zone
    strategy.close_all(comment="【收盘清仓·防诈】")
    long_triggered := false
    short_triggered := false

// =============================================================================
// 🎨 可视化：让你看得清，死得明
// =============================================================================

// 动态区间
plot(entry_high, "🔥 动态突破高", color=color.new(color.red, 30), linewidth=2, style=plot.style_linebr)
plot(entry_low,  "🔻 动态突破低", color=color.new(color.green, 30), linewidth=2, style=plot.style_linebr)

// 信号标记
plotshape(long_signal, "📈 地狱多", location=location.belowbar, color=color.red, style=shape.labelup, text="🔥多", size=size.normal)
plotshape(short_signal, "📉 地狱空", location=location.abovebar, color=color.lime, style=shape.labeldown, text="🔻空", size=size.normal)

// 背景：信号窗口
bgcolor(is_signal_zone ? color.new(color.red, 95) : na, title="【地狱开闸】")

plot(low_far,  "📏 扩展低阈值", color=color.new(color.red, 70), linewidth=1, style=plot.style_linebr)
plot(high_near, "🚫 附近高过滤", color=color.new(color.green, 70), linewidth=1, style=plot.style_linebr)